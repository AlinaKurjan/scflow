import numpy as np
import pandas as pd
import scanpy as sc
import anndata
from scipy import io
import concurrent.futures
import argparse
import sys
import logging

# ########################################################################### #
# ###################### Set up the logging ################################# #
# ########################################################################### #

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
L = logging.getLogger("preprocess.py")


parser = argparse.ArgumentParser()

parser.add_argument("--matrix", default=None, type=str,
                        help="path to the matrix ec file")

parser.add_argument("--barcodes", default=None, type=str,
                        help="path to barcodes file")

parser.add_argument("--ec", default=None, type=str,
                        help="path to ec txt file")

parser.add_argument("--genename", default=None, type=str,
                        help="path to gene names")

parser.add_argument("--outfile", default=None, type=str,
                        help="path to outfile")

args = parser.parse_args()

L.info("args:")
print(args)


sc.settings.verbosity = 3             # verbosity: errors (0), warnings (1), info (2), hints (3)
print(sc.logging.print_header())
sc.settings.set_figure_params(dpi=80, facecolor='white')


results_file = args.outfile  # the file that will store the analysis results


def import_tcc_matrix_as_anndata(
    matrix_path, barcodes_path, ec_path, txnames_path, threads=1
):
    """Import a TCC matrix as an Anndata object.
    :param matrix_path: path to the matrix ec file
    :type matrix_path: str
    :param barcodes_path: path to the barcodes txt file
    :type barcodes_path: str
    :param genes_path: path to the ec txt file
    :type genes_path: str
    :param txnames_path: path to transcripts.txt generated by `kallisto bus`
    :type txnames_path: str
    :return: a new Anndata object
    :rtype: anndata.Anndata
    """
    df_barcodes = pd.read_csv(
        barcodes_path, index_col=0, header=None, names=['barcode']
    )
 
    txnames = pd.read_csv(
        txnames_path, index_col=0, header=None, names=['genes']
    )
    
    return anndata.AnnData(
        X=scipy.io.mmread(matrix_path).tocsr(), obs=df_barcodes, var=txnames
    )

adata = import_tcc_matrix_as_anndata(matrix_path=args.matrix,
                                     barcodes_path=args.barcodes,
                                     ec_path=args.ec,
                                     txnames_path=args.genename)

anndata.AnnData.write(adata, filename=results_file)

def main(argv=None):
    if argv is None:
        argv = sys.argv

if __name__ == "__main__":
    sys.exit(main(sys.argv))
